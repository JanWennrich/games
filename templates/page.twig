<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="x-ua-compatible" content="ie=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>

    <title>Jan's Games Library</title>

    <style>
        :root {
            --game-row-height: 30px;
        }

        .game-rows {
            width: 100%;
            max-width: 800px;
        }

        .game-row {
            height: var(--game-row-height);
        }

        .game-row.hidden-by-installed-filter,
        .game-row.hidden-by-freetext-filter {
            display: none;
        }

        .game-column-icon img {
            height: var(--game-row-height);
        }
    </style>
</head>
<body>

<label for="freetext-filter">Filter: </label><input type="text" id="freetext-filter">
<label for="is-installed-filter">Show installed games only: </label><input type="checkbox" id="is-installed-filter">
<table class="game-rows">
    <thead>
    <tr>
        <th>Title</th>
        <th>Playtime</th>
        <th>Platform</th>
        <th>Installed?</th>
        <th>Favorite?</th>
        <th>Couch Coop?</th>
        <th>Genres</th>
        <th>Community Score</th>
        <th>Critic Score</th>
    </tr>
    </thead>
    <tbody>
    {% for game in games %}
        <tr class="game-row" data-game-is-installed="{{ game.isInstalled }}">
            <td class="game-column game-column-name">{{ game.name }}</td>
            <td class="game-column game-column-playtime">
                <time datetime="PT{{ game.playtime.inHours }}H">
                    {% if game.playtime.inHours > 0 %}
                        {{ game.playtime.inHours }} h
                    {% endif %}
                </time>
            </td>
            <td class="game-column game-column-platform">
                <img src="../{{ game.platform.iconPath }}"
                     alt="{{ game.platform.name }}"
                     title="{{ game.platform.name }}"/>
            </td>
            <td class="game-column game-column-installed">
                {{ game.isInstalled ? "üéÆ" }}
            </td>
            <td class="game-column game-column-favorite">
                {{ game.isFavorite ? "‚≠êÔ∏è" }}
            </td>
            <td class="game-column game-column-couch-coop">
                {{ game.isCouchCoopGame ? "ü§ù" }}
            </td>
            <td class="game-column game-column-genres">
                <ul>
                    {% for genre in game.genres %}
                        <li>{{ genre.name }}</li>
                    {% endfor %}
                </ul>
            </td>
            <td class="game-column game-column-community-score">
                {{ game.communityScore.value }}
            </td>
            <td class="game-column game-column-critic-score">
                {{ game.criticScore.value }}
            </td>
        </tr>
    {% endfor %}
    </tbody>
</table>
<script>
    function debounce(fn, delay) {
        let timeoutId;
        return function (...args) {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            timeoutId = setTimeout(() => {
                fn(...args);
            }, delay);
        };
    }

    document.querySelector('#name-filter').addEventListener(
        'input',
        debounce((event) => filterTable(event.target.value), 200)
    );

    function filterTable(filterValue) {
        function isFilterValueInFilterableGameColumn(gameRow) {
            const gameName = gameRow.querySelector('.game-column-name').textContent;
            const isFilterValueInGameName = gameName.toLowerCase().includes(filterValue.toLowerCase());

            if (isFilterValueInGameName) {
                return true;
            }

            const gamePlatform = gameRow.querySelector('.game-column-platform img').alt;
            const isFilterValueInGamePlatform = gamePlatform.toLowerCase().includes(filterValue.toLowerCase());

            if (isFilterValueInGamePlatform) {
                return true;
            }

            const gameGenres = Array.from(gameRow.querySelectorAll('.game-column-genres li')).map(genre => genre.textContent);
            const isFilterValueInGameGenres = gameGenres.some(genre => genre.toLowerCase().includes(filterValue.toLowerCase()));

            if (isFilterValueInGameGenres) {
                return true;
            }

            return false;
        }

        document.querySelectorAll('.game-row').forEach((row) => {
            if (isFilterValueInFilterableGameColumn(row)) {
                row.classList.remove('hidden-by-freetext-filter');
            } else {
                row.classList.add('hidden-by-freetext-filter');
            }
        })
    }
</script>
<script>
    function hideUninstalledGames() {
        document.querySelectorAll('.game-row').forEach((row) => {
            const isGameInstalled = row.getAttribute('data-game-is-installed');

            if (!isGameInstalled) {
                row.classList.add('hidden-by-installed-filter');
            } else {
                row.classList.remove('hidden-by-installed-filter');
            }
        })
    }

    function showUninstalledGames() {
        document.querySelectorAll('.game-row').forEach((row) => {
            row.classList.remove('hidden-by-installed-filter');
        })
    }

    document.querySelector('#is-installed-filter').addEventListener(
        'change',
        event => event.target.checked ? hideUninstalledGames() : showUninstalledGames()
    )
</script>
</body>
</html>